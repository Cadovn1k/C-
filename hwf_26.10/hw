using System;

namespace ASD
{
    class Program
    {
        class Set1
        {
            int[] a;
            int n;

            public Set1() { }
            public Set1(int nn)
            {
                a = new int[nn];
                n = 0;
            }
            public Set1(int[] mas)
            {
                a = new int[mas.Length];
                a[0] = mas[0];
                n = 1;
                for (int i = 1; i < mas.Length; i++)
                {
                    bool flag = true;
                    for (int j = 0; j < n; j++)
                    {
                        if (mas[i] == a[j])
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        a[n] = mas[i];
                        n++;
                    }
                }
            }
            public int N
            {
                get => n;
            }
            public int this[int i]
            {
                get
                {
                    if (i < 0 || i >= n) throw new Exception("Index out");
                    return a[i];
                }
                set
                {
                    if (i < 0 || i >= n) throw new Exception("Index out");
                    for (int j = 0; j < n; j++)
                    {
                        if (a[j] == value) throw new Exception("Double element (повторяющийся элемен)");
                        a[i] = value;
                    }
                }
            }
            public void Print()
            {
                for (int i = 0; i < a.Length; i++)
                {
                    Console.Write(a[i] + " ");
                }
                Console.WriteLine();
            }
            public bool Add(int x)
            {
                bool flag = true;
                for (int i = 0; i < a.Length; i++)
                {
                    if (a[i] == x)
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    n = a.Length + 1;
                    int[] mas = new int[n];
                    for (int i = 0; i < n - 1; i++)
                    {
                        mas[i] = a[i];
                    }
                    a = mas;
                    a[n - 1] = x;
                }
                return true;
            }
            public bool Equal(Set1 set1)
            {
                if (a.Length != set1.N) return false;
                int num = 0;
                bool flag = true;
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < n; j++)
                    {
                        if (set1[j] == a[i])
                        {
                            num++;
                            break;
                        }
                    }
                }
                if (num != n) flag = false;
                return flag;
            }
            public bool Contains(int x)
            {
                bool flag = false;
                for (int i = 0; i < n; i++)
                {
                    if (x == a[i])
                    {
                        flag = true;
                        break;
                    }
                }
                return flag;
            }
            public Set1 Intersect(Set1 set1)
            {
                int[] mas = new int[n];
                int num = 0;
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < set1.N; j++)
                    {
                        if (a[i] == set1[j])
                        {
                            mas[num] = a[i];
                            num++;
                            break;
                        }
                    }
                }
                if (n == mas.Length) return new Set1(mas);
                else
                {
                    int[] nmas = new int[num];
                    for (int i = 0; i < num; i++)
                    {
                        nmas[i] = mas[i];
                    }
                    return new Set1(nmas);
                }
            }
            public Set1 Union(Set1 set1)
            {
                Set1 un = new Set1(new int { });
                for (int i = 0; i < n; i++)
                {
                    un.Add(a[i]);
                }
                for (int i = 0; i < set1.N; i++)
                {
                    un.Add(set1[i]);
                }
                return un;
            }
            public Set1 Substraction(Set1 set1)
            {
                int[] mas = new int[n];
                int num = 0;
                for (int i = 0; i < n; i++)
                {
                    bool flag = true;
                    for (int j = 0; j < set1.N; j++)
                    {
                        if (a[i] == set1[j])
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        mas[num] = a[i];
                        num++;
                    }
                }
                if (num == n) return new Set1(mas);
                else
                {
                    int[] nmas = new int[num];
                    for (int i = 0; i < nmas.Length; i++)
                    {
                        nmas[i] = mas[i];
                    }
                    return new Set1(nmas);
                }
            }
            public bool Subset(Set1 set1)
            {
                int num = 0;
                for (int i = 0; i < set1.N; i++)
                {
                    for (int j = 0; j < a.Length; j++)
                    {
                        if (set1[i] == a[j])
                        {
                            num++;
                        }
                    }
                }
                if (num == set1.N) return true;
                else return false;
            }

            public static Set1 operator ++(Set1 s1)
            {
                for (int i = 0; i < s1.N; i++)
                    s1.a[i]++;
                return s1;
            }

            public static bool operator true(Set1 s1)
            {
                for (int i = 0; i < s1.N; i++)
                    if (s1.a[i] < 0) return false;
                return true;
            }

            public static bool operator false(Set1 s1)
            {
                for (int i = 0; i < s1.N; i++)
                    if (s1.a[i] < 0) return false;
                return true;
            }

            public static bool operator ==(Set1 s1, Set1 s2)
            {
                if (s1.n != s2.n) return false;
                for (int i = 0; i < s1.n; i++)
                {
                    bool exists = false;
                    foreach (int val in s2.a)
                        if (val == s1.a[i])
                        {
                            exists = true;
                            break;
                        }
                    if (!exists) return false;
                }
                return true;
            }

            public static bool operator !=(Set1 s1, Set1 s2)
            {
                if (s1 == s2) return false;

                return true;
            }
            static void Main(string[] args)
            {
                int[] arr = new int[5] { 1, 2, 3, 4, 5 };
                Set1 ex = new Set1(arr);
                Console.Write("Наше множество : ");
                ex.Print();
                int ad = 6;
                if (ex.Add(ad))
                {
                    Console.WriteLine("Добавлен элемент : " + ad);
                }
                else Console.WriteLine("Элемент {0} уже есть в множестве", ad);
                Set1 set1 = new Set1(new int[6] { 1, 2, 3, 4, 5, 6 });
                if (ex.Equal(set1))
                {
                    Console.WriteLine("Множества ex и set1 совпадают");
                }
                else Console.WriteLine("Множества ex и set1 отличаются");
                int con = 1;
                if (ex.Contains(con))
                {
                    Console.WriteLine("Элемент {0} находится во множестве", con);
                }
                else Console.WriteLine("Элемента {0} нет во множестве", con);

                Set1 set2 = new Set1(new int[10] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
                Set1 inters = ex.Intersect(set2);
                Console.Write("Пересечение множеств ex и set2 : ");
                inters.Print();

                Set1 set3 = new Set1(new int[10] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
                Set1 un = ex.Union(set3);
                Console.Write("Объединение множеств ex и set3 : ");
                un.Print();

                Set1 substr = set3.Substraction(ex);
                Console.Write("Вычитание множества ex из set3 : ");
                substr.Print();

                if (un.Subset(substr)) Console.Write("Множество substr является подмножеством un: ");
                else Console.Write("Множество substr не является подмножеством un: ");

                Console.WriteLine();
                // операции
                Console.WriteLine("Примеры для операций : ");
                Set1 s1 = new Set1(new int[] { 1, 2, 3, 4, 5 });
                Set1 s2 = new Set1(new int[] { 1, 2, 3, 4, 5 });
                Console.WriteLine(s1 == s2);
                s1++;
                s1.Print();
                Console.WriteLine(s1 == s2);
                if (s1) Console.WriteLine("Positive");
                else Console.WriteLine("Negative exists");
                
            }
        }
    }
}
