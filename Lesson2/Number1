package Site2ndweek;

import java.io.*;
import java.util.Arrays;

public class Nn1 {
    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader("input.txt"))) {
            String line = br.readLine(); // считаем сначала первую строку
            final LineNumberReader lnr = new LineNumberReader(new FileReader(new File("input.txt")));
            int r=0;
            String l1="";
            String l2="";
            while(null != lnr.readLine()) {
                if(r==0){
                    l1=line;
                    r=1;
                    line = br.readLine();
                }
                else
                    l2=line;
            }
            int mch[]=new int[Integer.parseInt(l1)];
            String[] customer = l2.split(" ");//разделены пробелом
            int mas[]= new int [Integer.parseInt(l1)];
            for (int i=0; i<mas.length; i++){
                mas[i]= Integer.parseInt(customer[i]);
            }
            StringBuffer s=new StringBuffer("");

            int[] result = mergesort(mas,s);
            for (int i=0;i<mas.length; i++) {
                s.append(result[i]).append(" ");
            }
            System.out.println(s);
            FileWriter writer = new FileWriter("output.txt"); //загрузка в файл
            writer.write(String.valueOf(s));
            writer.close();

        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
    }
    public static int[] mergesort(int[] array1,StringBuffer s) {  //сортировка слиянием
        int[] buffer1 = Arrays.copyOf(array1, array1.length);
        int[] buffer2 = new int[array1.length];
        int[] result = mergesortInner(buffer1, buffer2, 0, array1.length,s);
        return result;
    }



//    buffer2 Буфер. Размер должен быть равен размеру buffer1.
//    startIndex Начальный индекс в buffer1 для сортировки.
//    endIndex Конечный индекс в buffer1 для сортировки.


    public static int[] mergesortInner(int[] buffer1, int[] buffer2, int startIndex, int endIndex, StringBuffer s) {
        if (startIndex >= endIndex - 1) {
            return buffer1;
        }

        // уже отсортирован.
        int middle = startIndex + (endIndex - startIndex) / 2;
        int[] sorted1 = mergesortInner(buffer1, buffer2, startIndex, middle,s);
        int[] sorted2 = mergesortInner(buffer1, buffer2, middle, endIndex,s);

        // Слияние

        int index1 = startIndex;
        int index2 = middle;
        int destIndex = startIndex;
        int[] result = sorted1 == buffer1 ? buffer2 : buffer1;
        while (index1 < middle && index2 < endIndex) {
            result[destIndex++] = sorted1[index1] < sorted2[index2]
                    ? sorted1[index1++] : sorted2[index2++];
        }
        while (index1 < middle) {
            result[destIndex++] = sorted1[index1++];
        }
        while (index2 < endIndex) {
            result[destIndex++] = sorted2[index2++];
        }
        s.append(startIndex+1).append(" ").append(endIndex).append(" ").append(result[startIndex]).append(" ").append(result[endIndex-1]).append("\n");

        return result;
    }
}
